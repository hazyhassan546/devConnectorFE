{"ast":null,"code":"import { createAction } from \"redux-actions\";\nimport { createOrUpdateApi, getUserProfileApi, addExperienceApi, addEducationApi, deleteEducationAPi, deleteExperienceApi, getAllProfilesApi, getGithubRepoApi, getUserProfileByIDApi } from \"../ApiCalls/profileApi\";\nimport { ADD_EDUCATION, ADD_EDUCATION_ERROR, ADD_EDUCATION_SUCCESS, ADD_EXPERIENCE, ADD_EXPERIENCE_ERROR, ADD_EXPERIENCE_SUCCESS, CLEAR_PROFILE, CREATE_OR_UPDATE_USER_PROFILE, CREATE_OR_UPDATE_USER_PROFILE_ERROR, CREATE_OR_UPDATE_USER_PROFILE_SUCCESS, DELETE_EDUCATION, DELETE_EDUCATION_ERROR, DELETE_EDUCATION_SUCCESS, DELETE_EXPERIENCE, DELETE_EXPERIENCE_ERROR, DELETE_EXPERIENCE_SUCCESS, GET_ALL_USER_PROFILE, GET_ALL_USER_PROFILE_ERROR, GET_ALL_USER_PROFILE_SUCCESS, GET_USER_PROFILE, GET_USER_PROFILE_ERROR, GET_USER_PROFILE_SUCCESS, GET_USER_PROFILE_BY_ID, GET_USER_PROFILE_BY_ID_SUCCESS, GET_USER_PROFILE_BY_ID_ERROR, GET_GITHUB_REPO, GET_GITHUB_REPO_SUCCESS, GET_GITHUB_REPO_ERROR } from \"./types\";\nexport const profileActionCreator = {\n  getUserProfile: createAction(GET_USER_PROFILE, async payload => {\n    // this callback will be called when action is dis-patched.\n    await getUserProfileApi(payload);\n  }),\n  getUserProfileSuccess: createAction(GET_USER_PROFILE_SUCCESS),\n  getUserProfileFailed: createAction(GET_USER_PROFILE_ERROR),\n  clearProfile: createAction(CLEAR_PROFILE),\n  createOrUpdateProfile: createAction(CREATE_OR_UPDATE_USER_PROFILE, async payload => {\n    // this callback will be called when action is dis-patched.\n    await createOrUpdateApi(payload);\n  }),\n  createOrUpdateProfileSuccess: createAction(CREATE_OR_UPDATE_USER_PROFILE_SUCCESS),\n  createOrUpdateProfileError: createAction(CREATE_OR_UPDATE_USER_PROFILE_ERROR),\n  addExperience: createAction(ADD_EXPERIENCE, async payload => {\n    // this callback will be called when action is dis-patched.\n    await addExperienceApi(payload);\n  }),\n  addExperienceSuccess: createAction(ADD_EXPERIENCE_SUCCESS),\n  addExperienceProfileError: createAction(ADD_EXPERIENCE_ERROR),\n  addEducation: createAction(ADD_EDUCATION, async payload => {\n    // this callback will be called when action is dis-patched.\n    await addEducationApi(payload);\n  }),\n  addEducationSuccess: createAction(ADD_EDUCATION_SUCCESS),\n  addEducationError: createAction(ADD_EDUCATION_ERROR),\n  deleteEducation: createAction(DELETE_EDUCATION, async payload => {\n    await deleteEducationAPi(payload);\n  }),\n  deleteEducationSuccess: createAction(DELETE_EDUCATION_SUCCESS),\n  deleteEducationError: createAction(DELETE_EDUCATION_ERROR),\n  deleteExperience: createAction(DELETE_EXPERIENCE, async payload => {\n    await deleteExperienceApi(payload);\n  }),\n  deleteExperienceSuccess: createAction(DELETE_EXPERIENCE_SUCCESS),\n  deleteExperienceError: createAction(DELETE_EXPERIENCE_ERROR),\n  getAllUserProfiles: createAction(GET_ALL_USER_PROFILE, async () => {\n    await getAllProfilesApi();\n  }),\n  getAllUserProfilesSuccess: createAction(GET_ALL_USER_PROFILE_SUCCESS),\n  getAllUserProfileError: createAction(GET_ALL_USER_PROFILE_ERROR),\n  getUserProfileById: createAction(GET_USER_PROFILE_BY_ID, async () => {\n    await getUserProfileByIDApi();\n  }),\n  getUserProfileByIdSuccess: createAction(GET_USER_PROFILE_BY_ID_SUCCESS),\n  getUserProfileByIdError: createAction(GET_USER_PROFILE_BY_ID_ERROR),\n  getGithubRepo: createAction(GET_GITHUB_REPO, async payload => {\n    await getGithubRepoApi(payload);\n  }),\n  getGithubRepoSuccess: createAction(GET_GITHUB_REPO_SUCCESS),\n  getGithubRepoError: createAction(GET_GITHUB_REPO_ERROR)\n};","map":{"version":3,"sources":["/Users/hassanabbas/Desktop/Nodejs/DevConnector/client/src/redux/action/profile.js"],"names":["createAction","createOrUpdateApi","getUserProfileApi","addExperienceApi","addEducationApi","deleteEducationAPi","deleteExperienceApi","getAllProfilesApi","getGithubRepoApi","getUserProfileByIDApi","ADD_EDUCATION","ADD_EDUCATION_ERROR","ADD_EDUCATION_SUCCESS","ADD_EXPERIENCE","ADD_EXPERIENCE_ERROR","ADD_EXPERIENCE_SUCCESS","CLEAR_PROFILE","CREATE_OR_UPDATE_USER_PROFILE","CREATE_OR_UPDATE_USER_PROFILE_ERROR","CREATE_OR_UPDATE_USER_PROFILE_SUCCESS","DELETE_EDUCATION","DELETE_EDUCATION_ERROR","DELETE_EDUCATION_SUCCESS","DELETE_EXPERIENCE","DELETE_EXPERIENCE_ERROR","DELETE_EXPERIENCE_SUCCESS","GET_ALL_USER_PROFILE","GET_ALL_USER_PROFILE_ERROR","GET_ALL_USER_PROFILE_SUCCESS","GET_USER_PROFILE","GET_USER_PROFILE_ERROR","GET_USER_PROFILE_SUCCESS","GET_USER_PROFILE_BY_ID","GET_USER_PROFILE_BY_ID_SUCCESS","GET_USER_PROFILE_BY_ID_ERROR","GET_GITHUB_REPO","GET_GITHUB_REPO_SUCCESS","GET_GITHUB_REPO_ERROR","profileActionCreator","getUserProfile","payload","getUserProfileSuccess","getUserProfileFailed","clearProfile","createOrUpdateProfile","createOrUpdateProfileSuccess","createOrUpdateProfileError","addExperience","addExperienceSuccess","addExperienceProfileError","addEducation","addEducationSuccess","addEducationError","deleteEducation","deleteEducationSuccess","deleteEducationError","deleteExperience","deleteExperienceSuccess","deleteExperienceError","getAllUserProfiles","getAllUserProfilesSuccess","getAllUserProfileError","getUserProfileById","getUserProfileByIdSuccess","getUserProfileByIdError","getGithubRepo","getGithubRepoSuccess","getGithubRepoError"],"mappings":"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","sourcesContent":["import { createAction } from \"redux-actions\";\nimport {\n  createOrUpdateApi,\n  getUserProfileApi,\n  addExperienceApi,\n  addEducationApi,\n  deleteEducationAPi,\n  deleteExperienceApi,\n  getAllProfilesApi,\n  getGithubRepoApi,\n  getUserProfileByIDApi,\n} from \"../ApiCalls/profileApi\";\nimport {\n  ADD_EDUCATION,\n  ADD_EDUCATION_ERROR,\n  ADD_EDUCATION_SUCCESS,\n  ADD_EXPERIENCE,\n  ADD_EXPERIENCE_ERROR,\n  ADD_EXPERIENCE_SUCCESS,\n  CLEAR_PROFILE,\n  CREATE_OR_UPDATE_USER_PROFILE,\n  CREATE_OR_UPDATE_USER_PROFILE_ERROR,\n  CREATE_OR_UPDATE_USER_PROFILE_SUCCESS,\n  DELETE_EDUCATION,\n  DELETE_EDUCATION_ERROR,\n  DELETE_EDUCATION_SUCCESS,\n  DELETE_EXPERIENCE,\n  DELETE_EXPERIENCE_ERROR,\n  DELETE_EXPERIENCE_SUCCESS,\n  GET_ALL_USER_PROFILE,\n  GET_ALL_USER_PROFILE_ERROR,\n  GET_ALL_USER_PROFILE_SUCCESS,\n  GET_USER_PROFILE,\n  GET_USER_PROFILE_ERROR,\n  GET_USER_PROFILE_SUCCESS,\n  GET_USER_PROFILE_BY_ID,\n  GET_USER_PROFILE_BY_ID_SUCCESS,\n  GET_USER_PROFILE_BY_ID_ERROR,\n  GET_GITHUB_REPO,\n  GET_GITHUB_REPO_SUCCESS,\n  GET_GITHUB_REPO_ERROR,\n} from \"./types\";\n\nexport const profileActionCreator = {\n  getUserProfile: createAction(GET_USER_PROFILE, async (payload) => {\n    // this callback will be called when action is dis-patched.\n    await getUserProfileApi(payload);\n  }),\n  getUserProfileSuccess: createAction(GET_USER_PROFILE_SUCCESS),\n  getUserProfileFailed: createAction(GET_USER_PROFILE_ERROR),\n  clearProfile: createAction(CLEAR_PROFILE),\n\n  createOrUpdateProfile: createAction(\n    CREATE_OR_UPDATE_USER_PROFILE,\n    async (payload) => {\n      // this callback will be called when action is dis-patched.\n      await createOrUpdateApi(payload);\n    }\n  ),\n  createOrUpdateProfileSuccess: createAction(\n    CREATE_OR_UPDATE_USER_PROFILE_SUCCESS\n  ),\n  createOrUpdateProfileError: createAction(CREATE_OR_UPDATE_USER_PROFILE_ERROR),\n\n  addExperience: createAction(ADD_EXPERIENCE, async (payload) => {\n    // this callback will be called when action is dis-patched.\n    await addExperienceApi(payload);\n  }),\n  addExperienceSuccess: createAction(ADD_EXPERIENCE_SUCCESS),\n  addExperienceProfileError: createAction(ADD_EXPERIENCE_ERROR),\n\n  addEducation: createAction(ADD_EDUCATION, async (payload) => {\n    // this callback will be called when action is dis-patched.\n    await addEducationApi(payload);\n  }),\n  addEducationSuccess: createAction(ADD_EDUCATION_SUCCESS),\n  addEducationError: createAction(ADD_EDUCATION_ERROR),\n\n  deleteEducation: createAction(DELETE_EDUCATION, async (payload) => {\n    await deleteEducationAPi(payload);\n  }),\n  deleteEducationSuccess: createAction(DELETE_EDUCATION_SUCCESS),\n  deleteEducationError: createAction(DELETE_EDUCATION_ERROR),\n\n  deleteExperience: createAction(DELETE_EXPERIENCE, async (payload) => {\n    await deleteExperienceApi(payload);\n  }),\n  deleteExperienceSuccess: createAction(DELETE_EXPERIENCE_SUCCESS),\n  deleteExperienceError: createAction(DELETE_EXPERIENCE_ERROR),\n\n  getAllUserProfiles: createAction(GET_ALL_USER_PROFILE, async () => {\n    await getAllProfilesApi();\n  }),\n  getAllUserProfilesSuccess: createAction(GET_ALL_USER_PROFILE_SUCCESS),\n  getAllUserProfileError: createAction(GET_ALL_USER_PROFILE_ERROR),\n\n  getUserProfileById: createAction(GET_USER_PROFILE_BY_ID, async () => {\n    await getUserProfileByIDApi();\n  }),\n  getUserProfileByIdSuccess: createAction(GET_USER_PROFILE_BY_ID_SUCCESS),\n  getUserProfileByIdError: createAction(GET_USER_PROFILE_BY_ID_ERROR),\n\n  getGithubRepo: createAction(GET_GITHUB_REPO, async (payload) => {\n    await getGithubRepoApi(payload);\n  }),\n  getGithubRepoSuccess: createAction(GET_GITHUB_REPO_SUCCESS),\n  getGithubRepoError: createAction(GET_GITHUB_REPO_ERROR),\n};\n"]},"metadata":{},"sourceType":"module"}