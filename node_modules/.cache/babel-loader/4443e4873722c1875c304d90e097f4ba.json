{"ast":null,"code":"import { ADD_COMMENT_SUCCESS, CREATE_POST_SUCCESS, DELETE_POST_SUCCESS, GET_ALL_POST, GET_ALL_POST_ERROR, GET_ALL_POST_SUCCESS, GET_SINGLE_POST, GET_SINGLE_POST_ERROR, GET_SINGLE_POST_SUCCESS, LIKE_POST_SUCCESS, UNLIKE_POST, UNLIKE_POST_SUCCESS } from \"../action/types\";\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: false,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_SINGLE_POST_SUCCESS:\n    case ADD_COMMENT_SUCCESS:\n      {\n        return { ...state,\n          post: payload,\n          loading: false\n        };\n      }\n\n    case GET_SINGLE_POST:\n    case GET_ALL_POST:\n      {\n        return { ...state,\n          loading: true,\n          post: null\n        };\n      }\n\n    case GET_ALL_POST_SUCCESS:\n      {\n        return { ...state,\n          loading: false,\n          posts: payload\n        };\n      }\n\n    case GET_SINGLE_POST_ERROR:\n    case GET_ALL_POST_ERROR:\n      {\n        return { ...state,\n          post: null,\n          loading: false\n        };\n      }\n\n    case LIKE_POST_SUCCESS:\n      {\n        let index = state.posts.map(item => item._id).indexOf(payload.postId);\n        let temp = state.posts;\n\n        if (index !== -1) {\n          temp[index].likes = payload.data;\n        }\n\n        return { ...state,\n          loading: false,\n          posts: temp\n        };\n      }\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        let index = state.posts.map(item => item._id).indexOf(payload.postId);\n        let temp = state.posts;\n\n        if (index !== -1) {\n          temp[index].likes = payload.data;\n        }\n\n        return { ...state,\n          loading: false,\n          posts: temp\n        };\n      }\n\n    case CREATE_POST_SUCCESS:\n      {\n        return { ...state,\n          loading: false,\n          posts: [payload, ...state.posts]\n        };\n      }\n\n    case DELETE_POST_SUCCESS:\n      {\n        let index = state.posts.map(item => item._id).indexOf(payload.postId);\n        let temp = state.posts;\n\n        if (index !== -1) {\n          temp.splice(index, 1);\n        }\n\n        return { ...state,\n          loading: false,\n          posts: temp\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/Users/hassanabbas/Desktop/Nodejs/DevConnector/client/src/redux/reducers/postReducer.js"],"names":["ADD_COMMENT_SUCCESS","CREATE_POST_SUCCESS","DELETE_POST_SUCCESS","GET_ALL_POST","GET_ALL_POST_ERROR","GET_ALL_POST_SUCCESS","GET_SINGLE_POST","GET_SINGLE_POST_ERROR","GET_SINGLE_POST_SUCCESS","LIKE_POST_SUCCESS","UNLIKE_POST","UNLIKE_POST_SUCCESS","initialState","posts","post","loading","error","state","action","type","payload","index","map","item","_id","indexOf","postId","temp","likes","data","splice"],"mappings":"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","sourcesContent":["import {\n  ADD_COMMENT_SUCCESS,\n  CREATE_POST_SUCCESS,\n  DELETE_POST_SUCCESS,\n  GET_ALL_POST,\n  GET_ALL_POST_ERROR,\n  GET_ALL_POST_SUCCESS,\n  GET_SINGLE_POST,\n  GET_SINGLE_POST_ERROR,\n  GET_SINGLE_POST_SUCCESS,\n  LIKE_POST_SUCCESS,\n  UNLIKE_POST,\n  UNLIKE_POST_SUCCESS,\n} from \"../action/types\";\n\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: false,\n  error: {},\n};\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case GET_SINGLE_POST_SUCCESS:\n    case ADD_COMMENT_SUCCESS: {\n      return {\n        ...state,\n        post: payload,\n        loading: false,\n      };\n    }\n    case GET_SINGLE_POST:\n    case GET_ALL_POST: {\n      return {\n        ...state,\n        loading: true,\n        post: null,\n      };\n    }\n    case GET_ALL_POST_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n        posts: payload,\n      };\n    }\n    case GET_SINGLE_POST_ERROR:\n    case GET_ALL_POST_ERROR: {\n      return {\n        ...state,\n        post: null,\n        loading: false,\n      };\n    }\n    case LIKE_POST_SUCCESS: {\n      let index = state.posts.map((item) => item._id).indexOf(payload.postId);\n      let temp = state.posts;\n      if (index !== -1) {\n        temp[index].likes = payload.data;\n      }\n      return {\n        ...state,\n        loading: false,\n        posts: temp,\n      };\n    }\n    case UNLIKE_POST_SUCCESS: {\n      let index = state.posts.map((item) => item._id).indexOf(payload.postId);\n      let temp = state.posts;\n      if (index !== -1) {\n        temp[index].likes = payload.data;\n      }\n      return {\n        ...state,\n        loading: false,\n        posts: temp,\n      };\n    }\n    case CREATE_POST_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n        posts: [payload, ...state.posts],\n      };\n    }\n    case DELETE_POST_SUCCESS: {\n      let index = state.posts.map((item) => item._id).indexOf(payload.postId);\n      let temp = state.posts;\n      if (index !== -1) {\n        temp.splice(index, 1);\n      }\n      return {\n        ...state,\n        loading: false,\n        posts: temp,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}