{"ast":null,"code":"import { createAction } from \"redux-actions\";\nimport { getAllPostApi, likePostAPi, unlikePostApi, createPostApi, deletePostApi, getSinglePostApi, deleteCommentApi, addCommentApi } from \"../ApiCalls/postApi\";\nimport { GET_ALL_POST, GET_ALL_POST_ERROR, GET_ALL_POST_SUCCESS, LIKE_POST, LIKE_POST_ERROR, LIKE_POST_SUCCESS, UNLIKE_POST, UNLIKE_POST_SUCCESS, UNLIKE_POST_ERROR, CREATE_POST, CREATE_POST_SUCCESS, CREATE_POST_ERROR, DELETE_POST, DELETE_POST_SUCCESS, DELETE_POST_ERROR, GET_SINGLE_POST, GET_SINGLE_POST_SUCCESS, GET_SINGLE_POST_ERROR, ADD_COMMENT, ADD_COMMENT_SUCCESS, ADD_COMMENT_ERROR, DELETE_COMMENT, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_ERROR } from \"./types\";\nexport const postActionCreator = {\n  createPost: createAction(CREATE_POST, async payload => {\n    await createPostApi(payload);\n  }),\n  createPostSuccess: createAction(CREATE_POST_SUCCESS),\n  createPostError: createAction(CREATE_POST_ERROR),\n  getAllPosts: createAction(GET_ALL_POST, async () => {\n    await getAllPostApi();\n  }),\n  getAllPostSuccess: createAction(GET_ALL_POST_SUCCESS),\n  getAllPostError: createAction(GET_ALL_POST_ERROR),\n  likePost: createAction(LIKE_POST, async payload => {\n    await likePostAPi(payload);\n  }),\n  likePostSuccess: createAction(LIKE_POST_SUCCESS),\n  likePostError: createAction(LIKE_POST_ERROR),\n  unlikePost: createAction(UNLIKE_POST, async payload => {\n    await unlikePostApi(payload);\n  }),\n  unlikePostSuccess: createAction(UNLIKE_POST_SUCCESS),\n  unlikePostError: createAction(UNLIKE_POST_ERROR),\n  deletePost: createAction(DELETE_POST, async payload => {\n    await deletePostApi(payload);\n  }),\n  deletePostSuccess: createAction(DELETE_POST_SUCCESS),\n  deletePostError: createAction(DELETE_POST_ERROR),\n  getSinglePost: createAction(GET_SINGLE_POST, async payload => {\n    await getSinglePostApi(payload);\n  }),\n  getSinglePostSuccess: createAction(GET_SINGLE_POST_SUCCESS),\n  getSinglePostError: createAction(GET_SINGLE_POST_ERROR),\n  addComment: createAction(ADD_COMMENT, async payload => {\n    await addCommentApi(payload);\n  }),\n  addCommentSuccess: createAction(ADD_COMMENT_SUCCESS),\n  addCommentError: createAction(ADD_COMMENT_ERROR),\n  deleteComment: createAction(DELETE_COMMENT, async payload => {\n    await deleteCommentApi(payload);\n  }),\n  deleteCommentSuccess: createAction(DELETE_COMMENT_SUCCESS),\n  deleteCommentError: createAction(DELETE_COMMENT_ERROR)\n};","map":{"version":3,"sources":["/Users/hassanabbas/Desktop/Nodejs/DevConnector/client/src/redux/action/post.js"],"names":["createAction","getAllPostApi","likePostAPi","unlikePostApi","createPostApi","deletePostApi","getSinglePostApi","deleteCommentApi","addCommentApi","GET_ALL_POST","GET_ALL_POST_ERROR","GET_ALL_POST_SUCCESS","LIKE_POST","LIKE_POST_ERROR","LIKE_POST_SUCCESS","UNLIKE_POST","UNLIKE_POST_SUCCESS","UNLIKE_POST_ERROR","CREATE_POST","CREATE_POST_SUCCESS","CREATE_POST_ERROR","DELETE_POST","DELETE_POST_SUCCESS","DELETE_POST_ERROR","GET_SINGLE_POST","GET_SINGLE_POST_SUCCESS","GET_SINGLE_POST_ERROR","ADD_COMMENT","ADD_COMMENT_SUCCESS","ADD_COMMENT_ERROR","DELETE_COMMENT","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_ERROR","postActionCreator","createPost","payload","createPostSuccess","createPostError","getAllPosts","getAllPostSuccess","getAllPostError","likePost","likePostSuccess","likePostError","unlikePost","unlikePostSuccess","unlikePostError","deletePost","deletePostSuccess","deletePostError","getSinglePost","getSinglePostSuccess","getSinglePostError","addComment","addCommentSuccess","addCommentError","deleteComment","deleteCommentSuccess","deleteCommentError"],"mappings":"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","sourcesContent":["import { createAction } from \"redux-actions\";\nimport {\n  getAllPostApi,\n  likePostAPi,\n  unlikePostApi,\n  createPostApi,\n  deletePostApi,\n  getSinglePostApi,\n  deleteCommentApi,\n  addCommentApi,\n} from \"../ApiCalls/postApi\";\nimport {\n  GET_ALL_POST,\n  GET_ALL_POST_ERROR,\n  GET_ALL_POST_SUCCESS,\n  LIKE_POST,\n  LIKE_POST_ERROR,\n  LIKE_POST_SUCCESS,\n  UNLIKE_POST,\n  UNLIKE_POST_SUCCESS,\n  UNLIKE_POST_ERROR,\n  CREATE_POST,\n  CREATE_POST_SUCCESS,\n  CREATE_POST_ERROR,\n  DELETE_POST,\n  DELETE_POST_SUCCESS,\n  DELETE_POST_ERROR,\n  GET_SINGLE_POST,\n  GET_SINGLE_POST_SUCCESS,\n  GET_SINGLE_POST_ERROR,\n  ADD_COMMENT,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_ERROR,\n  DELETE_COMMENT,\n  DELETE_COMMENT_SUCCESS,\n  DELETE_COMMENT_ERROR,\n} from \"./types\";\n\nexport const postActionCreator = {\n  createPost: createAction(CREATE_POST, async (payload) => {\n    await createPostApi(payload);\n  }),\n  createPostSuccess: createAction(CREATE_POST_SUCCESS),\n  createPostError: createAction(CREATE_POST_ERROR),\n\n  getAllPosts: createAction(GET_ALL_POST, async () => {\n    await getAllPostApi();\n  }),\n  getAllPostSuccess: createAction(GET_ALL_POST_SUCCESS),\n  getAllPostError: createAction(GET_ALL_POST_ERROR),\n\n  likePost: createAction(LIKE_POST, async (payload) => {\n    await likePostAPi(payload);\n  }),\n  likePostSuccess: createAction(LIKE_POST_SUCCESS),\n  likePostError: createAction(LIKE_POST_ERROR),\n\n  unlikePost: createAction(UNLIKE_POST, async (payload) => {\n    await unlikePostApi(payload);\n  }),\n  unlikePostSuccess: createAction(UNLIKE_POST_SUCCESS),\n  unlikePostError: createAction(UNLIKE_POST_ERROR),\n\n  deletePost: createAction(DELETE_POST, async (payload) => {\n    await deletePostApi(payload);\n  }),\n  deletePostSuccess: createAction(DELETE_POST_SUCCESS),\n  deletePostError: createAction(DELETE_POST_ERROR),\n\n  getSinglePost: createAction(GET_SINGLE_POST, async (payload) => {\n    await getSinglePostApi(payload);\n  }),\n  getSinglePostSuccess: createAction(GET_SINGLE_POST_SUCCESS),\n  getSinglePostError: createAction(GET_SINGLE_POST_ERROR),\n\n  addComment: createAction(ADD_COMMENT, async (payload) => {\n    await addCommentApi(payload);\n  }),\n  addCommentSuccess: createAction(ADD_COMMENT_SUCCESS),\n  addCommentError: createAction(ADD_COMMENT_ERROR),\n\n  deleteComment: createAction(DELETE_COMMENT, async (payload) => {\n    await deleteCommentApi(payload);\n  }),\n  deleteCommentSuccess: createAction(DELETE_COMMENT_SUCCESS),\n  deleteCommentError: createAction(DELETE_COMMENT_ERROR),\n};\n"]},"metadata":{},"sourceType":"module"}