{"ast":null,"code":"import { createAction } from \"redux-actions\";\nimport { loadUser, registerAPI, loginApi, deleteAccountApi } from \"../ApiCalls/authAPi\";\nimport { REGISTER_USER, REGISTER_USER_SUCCESS, REGISTER_USER_FAILED, LOAD_USER, USER_LOADED, AUTH_ERROR, LOGIN_USER, LOGIN_SUCCESS, LOGIN_ERROR, LOGOUT, DELETE_ACCOUNT, DELETE_ACCOUNT_ERROR, DELETE_ACCOUNT_SUCCESS } from \"./types\";\nexport const authActionCreator = {\n  registerUser: createAction(REGISTER_USER, async payload => {\n    // this callback will be called when action is dis-patched.\n    await registerAPI(payload);\n  }),\n  registerUserSuccess: createAction(REGISTER_USER_SUCCESS),\n  registerUserFailed: createAction(REGISTER_USER_FAILED),\n  //// Login User\n  loadUser: createAction(LOAD_USER, async () => {\n    await loadUser();\n  }),\n  userLoaded: createAction(USER_LOADED),\n  authError: createAction(AUTH_ERROR),\n  loginUser: createAction(LOGIN_USER, async payload => {\n    // this callback will be called when action is dis-patched.\n    await loginApi(payload);\n  }),\n  loginSuccess: createAction(LOGIN_SUCCESS),\n  loginError: createAction(LOGIN_ERROR),\n  logout: createAction(LOGOUT),\n  deleteAccount: createAction(DELETE_ACCOUNT, async () => {\n    await deleteAccountApi();\n  }),\n  deleteAccountSuccess: createAction(DELETE_ACCOUNT_SUCCESS),\n  deleteAccountError: createAction(DELETE_ACCOUNT_ERROR)\n};","map":{"version":3,"sources":["/Users/hassanabbas/Desktop/Nodejs/DevConnector/client/src/redux/action/auth.js"],"names":["createAction","loadUser","registerAPI","loginApi","deleteAccountApi","REGISTER_USER","REGISTER_USER_SUCCESS","REGISTER_USER_FAILED","LOAD_USER","USER_LOADED","AUTH_ERROR","LOGIN_USER","LOGIN_SUCCESS","LOGIN_ERROR","LOGOUT","DELETE_ACCOUNT","DELETE_ACCOUNT_ERROR","DELETE_ACCOUNT_SUCCESS","authActionCreator","registerUser","payload","registerUserSuccess","registerUserFailed","userLoaded","authError","loginUser","loginSuccess","loginError","logout","deleteAccount","deleteAccountSuccess","deleteAccountError"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SACEC,QADF,EAEEC,WAFF,EAGEC,QAHF,EAIEC,gBAJF,QAKO,qBALP;AAMA,SACEC,aADF,EAEEC,qBAFF,EAGEC,oBAHF,EAIEC,SAJF,EAKEC,WALF,EAMEC,UANF,EAOEC,UAPF,EAQEC,aARF,EASEC,WATF,EAUEC,MAVF,EAWEC,cAXF,EAYEC,oBAZF,EAaEC,sBAbF,QAcO,SAdP;AAgBA,OAAO,MAAMC,iBAAiB,GAAG;AAC/BC,EAAAA,YAAY,EAAEnB,YAAY,CAACK,aAAD,EAAgB,MAAOe,OAAP,IAAmB;AAC3D;AACA,UAAMlB,WAAW,CAACkB,OAAD,CAAjB;AACD,GAHyB,CADK;AAK/BC,EAAAA,mBAAmB,EAAErB,YAAY,CAACM,qBAAD,CALF;AAM/BgB,EAAAA,kBAAkB,EAAEtB,YAAY,CAACO,oBAAD,CAND;AAO/B;AACAN,EAAAA,QAAQ,EAAED,YAAY,CAACQ,SAAD,EAAY,YAAY;AAC5C,UAAMP,QAAQ,EAAd;AACD,GAFqB,CARS;AAW/BsB,EAAAA,UAAU,EAAEvB,YAAY,CAACS,WAAD,CAXO;AAY/Be,EAAAA,SAAS,EAAExB,YAAY,CAACU,UAAD,CAZQ;AAc/Be,EAAAA,SAAS,EAAEzB,YAAY,CAACW,UAAD,EAAa,MAAOS,OAAP,IAAmB;AACrD;AACA,UAAMjB,QAAQ,CAACiB,OAAD,CAAd;AACD,GAHsB,CAdQ;AAmB/BM,EAAAA,YAAY,EAAE1B,YAAY,CAACY,aAAD,CAnBK;AAoB/Be,EAAAA,UAAU,EAAE3B,YAAY,CAACa,WAAD,CApBO;AAqB/Be,EAAAA,MAAM,EAAE5B,YAAY,CAACc,MAAD,CArBW;AAuB/Be,EAAAA,aAAa,EAAE7B,YAAY,CAACe,cAAD,EAAiB,YAAY;AACtD,UAAMX,gBAAgB,EAAtB;AACD,GAF0B,CAvBI;AA0B/B0B,EAAAA,oBAAoB,EAAE9B,YAAY,CAACiB,sBAAD,CA1BH;AA2B/Bc,EAAAA,kBAAkB,EAAE/B,YAAY,CAACgB,oBAAD;AA3BD,CAA1B","sourcesContent":["import { createAction } from \"redux-actions\";\nimport {\n  loadUser,\n  registerAPI,\n  loginApi,\n  deleteAccountApi,\n} from \"../ApiCalls/authAPi\";\nimport {\n  REGISTER_USER,\n  REGISTER_USER_SUCCESS,\n  REGISTER_USER_FAILED,\n  LOAD_USER,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_USER,\n  LOGIN_SUCCESS,\n  LOGIN_ERROR,\n  LOGOUT,\n  DELETE_ACCOUNT,\n  DELETE_ACCOUNT_ERROR,\n  DELETE_ACCOUNT_SUCCESS,\n} from \"./types\";\n\nexport const authActionCreator = {\n  registerUser: createAction(REGISTER_USER, async (payload) => {\n    // this callback will be called when action is dis-patched.\n    await registerAPI(payload);\n  }),\n  registerUserSuccess: createAction(REGISTER_USER_SUCCESS),\n  registerUserFailed: createAction(REGISTER_USER_FAILED),\n  //// Login User\n  loadUser: createAction(LOAD_USER, async () => {\n    await loadUser();\n  }),\n  userLoaded: createAction(USER_LOADED),\n  authError: createAction(AUTH_ERROR),\n\n  loginUser: createAction(LOGIN_USER, async (payload) => {\n    // this callback will be called when action is dis-patched.\n    await loginApi(payload);\n  }),\n\n  loginSuccess: createAction(LOGIN_SUCCESS),\n  loginError: createAction(LOGIN_ERROR),\n  logout: createAction(LOGOUT),\n\n  deleteAccount: createAction(DELETE_ACCOUNT, async () => {\n    await deleteAccountApi();\n  }),\n  deleteAccountSuccess: createAction(DELETE_ACCOUNT_SUCCESS),\n  deleteAccountError: createAction(DELETE_ACCOUNT_ERROR),\n};\n"]},"metadata":{},"sourceType":"module"}