{"ast":null,"code":"import { createAction } from \"redux-actions\";\nimport { loadUser, registerAPI } from \"../ApiCalls/authAPi\";\nimport { REGISTER_USER, REGISTER_USER_SUCCESS, REGISTER_USER_FAILED, LOAD_USER, USER_LOADED, AUTH_ERROR } from \"./types\";\nexport const authActionCreator = {\n  registerUser: createAction(REGISTER_USER, async payload => {\n    // this callback will be called when action is dis-patched.\n    await registerAPI(payload);\n  }),\n  registerUserSuccess: createAction(REGISTER_USER_SUCCESS),\n  registerUserFailed: createAction(REGISTER_USER_FAILED),\n  //// Login User\n  loadUser: createAction(LOAD_USER, async () => {\n    await loadUser();\n  }),\n  userLoaded: createAction(USER_LOADED),\n  authError: createAction(AUTH_ERROR)\n};","map":{"version":3,"sources":["/Users/hassanabbas/Desktop/Nodejs/DevConnector/client/src/redux/action/auth.js"],"names":["createAction","loadUser","registerAPI","REGISTER_USER","REGISTER_USER_SUCCESS","REGISTER_USER_FAILED","LOAD_USER","USER_LOADED","AUTH_ERROR","authActionCreator","registerUser","payload","registerUserSuccess","registerUserFailed","userLoaded","authError"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AACA,SACEC,aADF,EAEEC,qBAFF,EAGEC,oBAHF,EAIEC,SAJF,EAKEC,WALF,EAMEC,UANF,QAOO,SAPP;AASA,OAAO,MAAMC,iBAAiB,GAAG;AAC/BC,EAAAA,YAAY,EAAEV,YAAY,CAACG,aAAD,EAAgB,MAAOQ,OAAP,IAAmB;AAC3D;AACA,UAAMT,WAAW,CAACS,OAAD,CAAjB;AACD,GAHyB,CADK;AAK/BC,EAAAA,mBAAmB,EAAEZ,YAAY,CAACI,qBAAD,CALF;AAM/BS,EAAAA,kBAAkB,EAAEb,YAAY,CAACK,oBAAD,CAND;AAOjC;AACEJ,EAAAA,QAAQ,EAAED,YAAY,CAACM,SAAD,EAAY,YAAY;AAC5C,UAAML,QAAQ,EAAd;AACD,GAFqB,CARS;AAW/Ba,EAAAA,UAAU,EAAEd,YAAY,CAACO,WAAD,CAXO;AAY/BQ,EAAAA,SAAS,EAAEf,YAAY,CAACQ,UAAD;AAZQ,CAA1B","sourcesContent":["import { createAction } from \"redux-actions\";\nimport { loadUser, registerAPI } from \"../ApiCalls/authAPi\";\nimport {\n  REGISTER_USER,\n  REGISTER_USER_SUCCESS,\n  REGISTER_USER_FAILED,\n  LOAD_USER,\n  USER_LOADED,\n  AUTH_ERROR,\n} from \"./types\";\n\nexport const authActionCreator = {\n  registerUser: createAction(REGISTER_USER, async (payload) => {\n    // this callback will be called when action is dis-patched.\n    await registerAPI(payload);\n  }),\n  registerUserSuccess: createAction(REGISTER_USER_SUCCESS),\n  registerUserFailed: createAction(REGISTER_USER_FAILED),\n//// Login User\n  loadUser: createAction(LOAD_USER, async () => {\n    await loadUser();\n  }),\n  userLoaded: createAction(USER_LOADED),\n  authError: createAction(AUTH_ERROR),\n};\n"]},"metadata":{},"sourceType":"module"}