{"ast":null,"code":"import { createAction } from \"redux-actions\";\nimport { getAllPostApi, likePostAPi, unlikePostApi, createPostApi, deletePostApi } from \"../ApiCalls/postApi\";\nimport { GET_ALL_POST, GET_ALL_POST_ERROR, GET_ALL_POST_SUCCESS, LIKE_POST, LIKE_POST_ERROR, LIKE_POST_SUCCESS, UNLIKE_POST, UNLIKE_POST_SUCCESS, UNLIKE_POST_ERROR, CREATE_POST, CREATE_POST_SUCCESS, CREATE_POST_ERROR, DELETE_POST, DELETE_POST_SUCCESS, DELETE_POST_ERROR, GET_SINGLE_POST, GET_SINGLE_POST_SUCCESS, GET_SINGLE_POST_ERROR } from \"./types\";\nexport const postActionCreator = {\n  createPost: createAction(CREATE_POST, async payload => {\n    await createPostApi(payload);\n  }),\n  createPostSuccess: createAction(CREATE_POST_SUCCESS),\n  createPostError: createAction(CREATE_POST_ERROR),\n  getAllPosts: createAction(GET_ALL_POST, async () => {\n    await getAllPostApi();\n  }),\n  getAllPostSuccess: createAction(GET_ALL_POST_SUCCESS),\n  getAllPostError: createAction(GET_ALL_POST_ERROR),\n  likePost: createAction(LIKE_POST, async payload => {\n    await likePostAPi(payload);\n  }),\n  likePostSuccess: createAction(LIKE_POST_SUCCESS),\n  likePostError: createAction(LIKE_POST_ERROR),\n  unlikePost: createAction(UNLIKE_POST, async payload => {\n    await unlikePostApi(payload);\n  }),\n  unlikePostSuccess: createAction(UNLIKE_POST_SUCCESS),\n  unlikePostError: createAction(UNLIKE_POST_ERROR),\n  deletePost: createAction(DELETE_POST, async payload => {\n    await deletePostApi(payload);\n  }),\n  deletePostSuccess: createAction(DELETE_POST_SUCCESS),\n  deletePostError: createAction(DELETE_POST_ERROR),\n  getSinglePost: createAction(GET_SINGLE_POST),\n  getSinglePostSuccess: createAction(GET_SINGLE_POST_SUCCESS),\n  getSinglePostError: createAction(GET_SINGLE_POST_ERROR)\n};","map":{"version":3,"sources":["/Users/hassanabbas/Desktop/Nodejs/DevConnector/client/src/redux/action/post.js"],"names":["createAction","getAllPostApi","likePostAPi","unlikePostApi","createPostApi","deletePostApi","GET_ALL_POST","GET_ALL_POST_ERROR","GET_ALL_POST_SUCCESS","LIKE_POST","LIKE_POST_ERROR","LIKE_POST_SUCCESS","UNLIKE_POST","UNLIKE_POST_SUCCESS","UNLIKE_POST_ERROR","CREATE_POST","CREATE_POST_SUCCESS","CREATE_POST_ERROR","DELETE_POST","DELETE_POST_SUCCESS","DELETE_POST_ERROR","GET_SINGLE_POST","GET_SINGLE_POST_SUCCESS","GET_SINGLE_POST_ERROR","postActionCreator","createPost","payload","createPostSuccess","createPostError","getAllPosts","getAllPostSuccess","getAllPostError","likePost","likePostSuccess","likePostError","unlikePost","unlikePostSuccess","unlikePostError","deletePost","deletePostSuccess","deletePostError","getSinglePost","getSinglePostSuccess","getSinglePostError"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SACEC,aADF,EAEEC,WAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,aALF,QAMO,qBANP;AAOA,SACEC,YADF,EAEEC,kBAFF,EAGEC,oBAHF,EAIEC,SAJF,EAKEC,eALF,EAMEC,iBANF,EAOEC,WAPF,EAQEC,mBARF,EASEC,iBATF,EAUEC,WAVF,EAWEC,mBAXF,EAYEC,iBAZF,EAaEC,WAbF,EAcEC,mBAdF,EAeEC,iBAfF,EAgBEC,eAhBF,EAiBEC,uBAjBF,EAkBEC,qBAlBF,QAmBO,SAnBP;AAqBA,OAAO,MAAMC,iBAAiB,GAAG;AAC/BC,EAAAA,UAAU,EAAEzB,YAAY,CAACe,WAAD,EAAc,MAAOW,OAAP,IAAmB;AACvD,UAAMtB,aAAa,CAACsB,OAAD,CAAnB;AACD,GAFuB,CADO;AAI/BC,EAAAA,iBAAiB,EAAE3B,YAAY,CAACgB,mBAAD,CAJA;AAK/BY,EAAAA,eAAe,EAAE5B,YAAY,CAACiB,iBAAD,CALE;AAO/BY,EAAAA,WAAW,EAAE7B,YAAY,CAACM,YAAD,EAAe,YAAY;AAClD,UAAML,aAAa,EAAnB;AACD,GAFwB,CAPM;AAU/B6B,EAAAA,iBAAiB,EAAE9B,YAAY,CAACQ,oBAAD,CAVA;AAW/BuB,EAAAA,eAAe,EAAE/B,YAAY,CAACO,kBAAD,CAXE;AAa/ByB,EAAAA,QAAQ,EAAEhC,YAAY,CAACS,SAAD,EAAY,MAAOiB,OAAP,IAAmB;AACnD,UAAMxB,WAAW,CAACwB,OAAD,CAAjB;AACD,GAFqB,CAbS;AAgB/BO,EAAAA,eAAe,EAAEjC,YAAY,CAACW,iBAAD,CAhBE;AAiB/BuB,EAAAA,aAAa,EAAElC,YAAY,CAACU,eAAD,CAjBI;AAmB/ByB,EAAAA,UAAU,EAAEnC,YAAY,CAACY,WAAD,EAAc,MAAOc,OAAP,IAAmB;AACvD,UAAMvB,aAAa,CAACuB,OAAD,CAAnB;AACD,GAFuB,CAnBO;AAsB/BU,EAAAA,iBAAiB,EAAEpC,YAAY,CAACa,mBAAD,CAtBA;AAuB/BwB,EAAAA,eAAe,EAAErC,YAAY,CAACc,iBAAD,CAvBE;AAyB/BwB,EAAAA,UAAU,EAAEtC,YAAY,CAACkB,WAAD,EAAc,MAAOQ,OAAP,IAAmB;AACvD,UAAMrB,aAAa,CAACqB,OAAD,CAAnB;AACD,GAFuB,CAzBO;AA4B/Ba,EAAAA,iBAAiB,EAAEvC,YAAY,CAACmB,mBAAD,CA5BA;AA6B/BqB,EAAAA,eAAe,EAAExC,YAAY,CAACoB,iBAAD,CA7BE;AA+B/BqB,EAAAA,aAAa,EAAEzC,YAAY,CAACqB,eAAD,CA/BI;AAgC/BqB,EAAAA,oBAAoB,EAAE1C,YAAY,CAACsB,uBAAD,CAhCH;AAiC/BqB,EAAAA,kBAAkB,EAAE3C,YAAY,CAACuB,qBAAD;AAjCD,CAA1B","sourcesContent":["import { createAction } from \"redux-actions\";\nimport {\n  getAllPostApi,\n  likePostAPi,\n  unlikePostApi,\n  createPostApi,\n  deletePostApi,\n} from \"../ApiCalls/postApi\";\nimport {\n  GET_ALL_POST,\n  GET_ALL_POST_ERROR,\n  GET_ALL_POST_SUCCESS,\n  LIKE_POST,\n  LIKE_POST_ERROR,\n  LIKE_POST_SUCCESS,\n  UNLIKE_POST,\n  UNLIKE_POST_SUCCESS,\n  UNLIKE_POST_ERROR,\n  CREATE_POST,\n  CREATE_POST_SUCCESS,\n  CREATE_POST_ERROR,\n  DELETE_POST,\n  DELETE_POST_SUCCESS,\n  DELETE_POST_ERROR,\n  GET_SINGLE_POST,\n  GET_SINGLE_POST_SUCCESS,\n  GET_SINGLE_POST_ERROR,\n} from \"./types\";\n\nexport const postActionCreator = {\n  createPost: createAction(CREATE_POST, async (payload) => {\n    await createPostApi(payload);\n  }),\n  createPostSuccess: createAction(CREATE_POST_SUCCESS),\n  createPostError: createAction(CREATE_POST_ERROR),\n\n  getAllPosts: createAction(GET_ALL_POST, async () => {\n    await getAllPostApi();\n  }),\n  getAllPostSuccess: createAction(GET_ALL_POST_SUCCESS),\n  getAllPostError: createAction(GET_ALL_POST_ERROR),\n\n  likePost: createAction(LIKE_POST, async (payload) => {\n    await likePostAPi(payload);\n  }),\n  likePostSuccess: createAction(LIKE_POST_SUCCESS),\n  likePostError: createAction(LIKE_POST_ERROR),\n\n  unlikePost: createAction(UNLIKE_POST, async (payload) => {\n    await unlikePostApi(payload);\n  }),\n  unlikePostSuccess: createAction(UNLIKE_POST_SUCCESS),\n  unlikePostError: createAction(UNLIKE_POST_ERROR),\n\n  deletePost: createAction(DELETE_POST, async (payload) => {\n    await deletePostApi(payload);\n  }),\n  deletePostSuccess: createAction(DELETE_POST_SUCCESS),\n  deletePostError: createAction(DELETE_POST_ERROR),\n\n  getSinglePost: createAction(GET_SINGLE_POST),\n  getSinglePostSuccess: createAction(GET_SINGLE_POST_SUCCESS),\n  getSinglePostError: createAction(GET_SINGLE_POST_ERROR),\n};\n"]},"metadata":{},"sourceType":"module"}