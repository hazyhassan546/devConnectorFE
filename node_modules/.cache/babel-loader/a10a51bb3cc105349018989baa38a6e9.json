{"ast":null,"code":"import { createAction } from \"redux-actions\";\nimport { createOrUpdateApi, getUserProfileApi, addExperienceApi, addEducationApi, deleteEducationAPi, deleteExperienceApi } from \"../ApiCalls/profileApi\";\nimport { ADD_EDUCATION, ADD_EDUCATION_ERROR, ADD_EDUCATION_SUCCESS, ADD_EXPERIENCE, ADD_EXPERIENCE_ERROR, ADD_EXPERIENCE_SUCCESS, CLEAR_PROFILE, CREATE_OR_UPDATE_USER_PROFILE, CREATE_OR_UPDATE_USER_PROFILE_ERROR, CREATE_OR_UPDATE_USER_PROFILE_SUCCESS, DELETE_ACCOUNT, DELETE_ACCOUNT_ERROR, DELETE_ACCOUNT_SUCCESS, DELETE_EDUCATION, DELETE_EDUCATION_ERROR, DELETE_EDUCATION_SUCCESS, DELETE_EXPERIENCE, DELETE_EXPERIENCE_ERROR, DELETE_EXPERIENCE_SUCCESS, GET_USER_PROFILE, GET_USER_PROFILE_ERROR, GET_USER_PROFILE_SUCCESS } from \"./types\";\nexport const profileActionCreator = {\n  getUserProfile: createAction(GET_USER_PROFILE, async payload => {\n    // this callback will be called when action is dis-patched.\n    await getUserProfileApi(payload);\n  }),\n  getUserProfileSuccess: createAction(GET_USER_PROFILE_SUCCESS),\n  getUserProfileFailed: createAction(GET_USER_PROFILE_ERROR),\n  clearProfile: createAction(CLEAR_PROFILE),\n  createOrUpdateProfile: createAction(CREATE_OR_UPDATE_USER_PROFILE, async payload => {\n    // this callback will be called when action is dis-patched.\n    await createOrUpdateApi(payload);\n  }),\n  createOrUpdateProfileSuccess: createAction(CREATE_OR_UPDATE_USER_PROFILE_SUCCESS),\n  createOrUpdateProfileError: createAction(CREATE_OR_UPDATE_USER_PROFILE_ERROR),\n  addExperience: createAction(ADD_EXPERIENCE, async payload => {\n    // this callback will be called when action is dis-patched.\n    await addExperienceApi(payload);\n  }),\n  addExperienceSuccess: createAction(ADD_EXPERIENCE_SUCCESS),\n  addExperienceProfileError: createAction(ADD_EXPERIENCE_ERROR),\n  addEducation: createAction(ADD_EDUCATION, async payload => {\n    // this callback will be called when action is dis-patched.\n    await addEducationApi(payload);\n  }),\n  addEducationSuccess: createAction(ADD_EDUCATION_SUCCESS),\n  addEducationError: createAction(ADD_EDUCATION_ERROR),\n  deleteEducation: createAction(DELETE_EDUCATION, async payload => {\n    await deleteEducationAPi(payload);\n  }),\n  deleteEducationSuccess: createAction(DELETE_EDUCATION_SUCCESS),\n  deleteEducationError: createAction(DELETE_EDUCATION_ERROR),\n  deleteExperience: createAction(DELETE_EXPERIENCE, async payload => {\n    await deleteExperienceApi(payload);\n  }),\n  deleteExperienceSuccess: createAction(DELETE_EXPERIENCE_SUCCESS),\n  deleteExperienceError: createAction(DELETE_EXPERIENCE_ERROR),\n  deleteAccount: createAction(DELETE_ACCOUNT),\n  deleteAccountSuccess: createAction(DELETE_ACCOUNT_SUCCESS),\n  deleteAccountError: createAction(DELETE_ACCOUNT_ERROR)\n};","map":{"version":3,"sources":["/Users/hassanabbas/Desktop/Nodejs/DevConnector/client/src/redux/action/profile.js"],"names":["createAction","createOrUpdateApi","getUserProfileApi","addExperienceApi","addEducationApi","deleteEducationAPi","deleteExperienceApi","ADD_EDUCATION","ADD_EDUCATION_ERROR","ADD_EDUCATION_SUCCESS","ADD_EXPERIENCE","ADD_EXPERIENCE_ERROR","ADD_EXPERIENCE_SUCCESS","CLEAR_PROFILE","CREATE_OR_UPDATE_USER_PROFILE","CREATE_OR_UPDATE_USER_PROFILE_ERROR","CREATE_OR_UPDATE_USER_PROFILE_SUCCESS","DELETE_ACCOUNT","DELETE_ACCOUNT_ERROR","DELETE_ACCOUNT_SUCCESS","DELETE_EDUCATION","DELETE_EDUCATION_ERROR","DELETE_EDUCATION_SUCCESS","DELETE_EXPERIENCE","DELETE_EXPERIENCE_ERROR","DELETE_EXPERIENCE_SUCCESS","GET_USER_PROFILE","GET_USER_PROFILE_ERROR","GET_USER_PROFILE_SUCCESS","profileActionCreator","getUserProfile","payload","getUserProfileSuccess","getUserProfileFailed","clearProfile","createOrUpdateProfile","createOrUpdateProfileSuccess","createOrUpdateProfileError","addExperience","addExperienceSuccess","addExperienceProfileError","addEducation","addEducationSuccess","addEducationError","deleteEducation","deleteEducationSuccess","deleteEducationError","deleteExperience","deleteExperienceSuccess","deleteExperienceError","deleteAccount","deleteAccountSuccess","deleteAccountError"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SACEC,iBADF,EAEEC,iBAFF,EAGEC,gBAHF,EAIEC,eAJF,EAKEC,kBALF,EAMEC,mBANF,QAOO,wBAPP;AAQA,SACEC,aADF,EAEEC,mBAFF,EAGEC,qBAHF,EAIEC,cAJF,EAKEC,oBALF,EAMEC,sBANF,EAOEC,aAPF,EAQEC,6BARF,EASEC,mCATF,EAUEC,qCAVF,EAWEC,cAXF,EAYEC,oBAZF,EAaEC,sBAbF,EAcEC,gBAdF,EAeEC,sBAfF,EAgBEC,wBAhBF,EAiBEC,iBAjBF,EAkBEC,uBAlBF,EAmBEC,yBAnBF,EAoBEC,gBApBF,EAqBEC,sBArBF,EAsBEC,wBAtBF,QAuBO,SAvBP;AAyBA,OAAO,MAAMC,oBAAoB,GAAG;AAClCC,EAAAA,cAAc,EAAE9B,YAAY,CAAC0B,gBAAD,EAAmB,MAAOK,OAAP,IAAmB;AAChE;AACA,UAAM7B,iBAAiB,CAAC6B,OAAD,CAAvB;AACD,GAH2B,CADM;AAKlCC,EAAAA,qBAAqB,EAAEhC,YAAY,CAAC4B,wBAAD,CALD;AAMlCK,EAAAA,oBAAoB,EAAEjC,YAAY,CAAC2B,sBAAD,CANA;AAOlCO,EAAAA,YAAY,EAAElC,YAAY,CAACa,aAAD,CAPQ;AASlCsB,EAAAA,qBAAqB,EAAEnC,YAAY,CACjCc,6BADiC,EAEjC,MAAOiB,OAAP,IAAmB;AACjB;AACA,UAAM9B,iBAAiB,CAAC8B,OAAD,CAAvB;AACD,GALgC,CATD;AAgBlCK,EAAAA,4BAA4B,EAAEpC,YAAY,CACxCgB,qCADwC,CAhBR;AAmBlCqB,EAAAA,0BAA0B,EAAErC,YAAY,CAACe,mCAAD,CAnBN;AAqBlCuB,EAAAA,aAAa,EAAEtC,YAAY,CAACU,cAAD,EAAiB,MAAOqB,OAAP,IAAmB;AAC7D;AACA,UAAM5B,gBAAgB,CAAC4B,OAAD,CAAtB;AACD,GAH0B,CArBO;AAyBlCQ,EAAAA,oBAAoB,EAAEvC,YAAY,CAACY,sBAAD,CAzBA;AA0BlC4B,EAAAA,yBAAyB,EAAExC,YAAY,CAACW,oBAAD,CA1BL;AA4BlC8B,EAAAA,YAAY,EAAEzC,YAAY,CAACO,aAAD,EAAgB,MAAOwB,OAAP,IAAmB;AAC3D;AACA,UAAM3B,eAAe,CAAC2B,OAAD,CAArB;AACD,GAHyB,CA5BQ;AAgClCW,EAAAA,mBAAmB,EAAE1C,YAAY,CAACS,qBAAD,CAhCC;AAiClCkC,EAAAA,iBAAiB,EAAE3C,YAAY,CAACQ,mBAAD,CAjCG;AAmClCoC,EAAAA,eAAe,EAAE5C,YAAY,CAACoB,gBAAD,EAAmB,MAAOW,OAAP,IAAmB;AACjE,UAAM1B,kBAAkB,CAAC0B,OAAD,CAAxB;AACD,GAF4B,CAnCK;AAsClCc,EAAAA,sBAAsB,EAAE7C,YAAY,CAACsB,wBAAD,CAtCF;AAuClCwB,EAAAA,oBAAoB,EAAE9C,YAAY,CAACqB,sBAAD,CAvCA;AAyClC0B,EAAAA,gBAAgB,EAAE/C,YAAY,CAACuB,iBAAD,EAAoB,MAAOQ,OAAP,IAAmB;AACnE,UAAMzB,mBAAmB,CAACyB,OAAD,CAAzB;AACD,GAF6B,CAzCI;AA4ClCiB,EAAAA,uBAAuB,EAAEhD,YAAY,CAACyB,yBAAD,CA5CH;AA6ClCwB,EAAAA,qBAAqB,EAAEjD,YAAY,CAACwB,uBAAD,CA7CD;AA+ClC0B,EAAAA,aAAa,EAAElD,YAAY,CAACiB,cAAD,CA/CO;AAgDlCkC,EAAAA,oBAAoB,EAAEnD,YAAY,CAACmB,sBAAD,CAhDA;AAiDlCiC,EAAAA,kBAAkB,EAAEpD,YAAY,CAACkB,oBAAD;AAjDE,CAA7B","sourcesContent":["import { createAction } from \"redux-actions\";\nimport {\n  createOrUpdateApi,\n  getUserProfileApi,\n  addExperienceApi,\n  addEducationApi,\n  deleteEducationAPi,\n  deleteExperienceApi,\n} from \"../ApiCalls/profileApi\";\nimport {\n  ADD_EDUCATION,\n  ADD_EDUCATION_ERROR,\n  ADD_EDUCATION_SUCCESS,\n  ADD_EXPERIENCE,\n  ADD_EXPERIENCE_ERROR,\n  ADD_EXPERIENCE_SUCCESS,\n  CLEAR_PROFILE,\n  CREATE_OR_UPDATE_USER_PROFILE,\n  CREATE_OR_UPDATE_USER_PROFILE_ERROR,\n  CREATE_OR_UPDATE_USER_PROFILE_SUCCESS,\n  DELETE_ACCOUNT,\n  DELETE_ACCOUNT_ERROR,\n  DELETE_ACCOUNT_SUCCESS,\n  DELETE_EDUCATION,\n  DELETE_EDUCATION_ERROR,\n  DELETE_EDUCATION_SUCCESS,\n  DELETE_EXPERIENCE,\n  DELETE_EXPERIENCE_ERROR,\n  DELETE_EXPERIENCE_SUCCESS,\n  GET_USER_PROFILE,\n  GET_USER_PROFILE_ERROR,\n  GET_USER_PROFILE_SUCCESS,\n} from \"./types\";\n\nexport const profileActionCreator = {\n  getUserProfile: createAction(GET_USER_PROFILE, async (payload) => {\n    // this callback will be called when action is dis-patched.\n    await getUserProfileApi(payload);\n  }),\n  getUserProfileSuccess: createAction(GET_USER_PROFILE_SUCCESS),\n  getUserProfileFailed: createAction(GET_USER_PROFILE_ERROR),\n  clearProfile: createAction(CLEAR_PROFILE),\n\n  createOrUpdateProfile: createAction(\n    CREATE_OR_UPDATE_USER_PROFILE,\n    async (payload) => {\n      // this callback will be called when action is dis-patched.\n      await createOrUpdateApi(payload);\n    }\n  ),\n  createOrUpdateProfileSuccess: createAction(\n    CREATE_OR_UPDATE_USER_PROFILE_SUCCESS\n  ),\n  createOrUpdateProfileError: createAction(CREATE_OR_UPDATE_USER_PROFILE_ERROR),\n\n  addExperience: createAction(ADD_EXPERIENCE, async (payload) => {\n    // this callback will be called when action is dis-patched.\n    await addExperienceApi(payload);\n  }),\n  addExperienceSuccess: createAction(ADD_EXPERIENCE_SUCCESS),\n  addExperienceProfileError: createAction(ADD_EXPERIENCE_ERROR),\n\n  addEducation: createAction(ADD_EDUCATION, async (payload) => {\n    // this callback will be called when action is dis-patched.\n    await addEducationApi(payload);\n  }),\n  addEducationSuccess: createAction(ADD_EDUCATION_SUCCESS),\n  addEducationError: createAction(ADD_EDUCATION_ERROR),\n\n  deleteEducation: createAction(DELETE_EDUCATION, async (payload) => {\n    await deleteEducationAPi(payload);\n  }),\n  deleteEducationSuccess: createAction(DELETE_EDUCATION_SUCCESS),\n  deleteEducationError: createAction(DELETE_EDUCATION_ERROR),\n\n  deleteExperience: createAction(DELETE_EXPERIENCE, async (payload) => {\n    await deleteExperienceApi(payload);\n  }),\n  deleteExperienceSuccess: createAction(DELETE_EXPERIENCE_SUCCESS),\n  deleteExperienceError: createAction(DELETE_EXPERIENCE_ERROR),\n\n  deleteAccount: createAction(DELETE_ACCOUNT),\n  deleteAccountSuccess: createAction(DELETE_ACCOUNT_SUCCESS),\n  deleteAccountError: createAction(DELETE_ACCOUNT_ERROR),\n};\n"]},"metadata":{},"sourceType":"module"}