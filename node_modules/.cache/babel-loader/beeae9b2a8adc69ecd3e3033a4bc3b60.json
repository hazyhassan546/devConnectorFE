{"ast":null,"code":"import { GET_ALL_POST, GET_ALL_POST_ERROR, GET_ALL_POST_SUCCESS, LIKE_POST_SUCCESS } from \"../action/types\";\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: false,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_ALL_POST:\n      {\n        return { ...state,\n          loading: true\n        };\n      }\n\n    case GET_ALL_POST_SUCCESS:\n      {\n        return { ...state,\n          loading: false,\n          posts: payload\n        };\n      }\n\n    case GET_ALL_POST_ERROR:\n      {\n        return { ...state,\n          loading: false\n        };\n      }\n\n    case LIKE_POST_SUCCESS:\n      {\n        let index = state.posts.filter(item => item._id).indexOf(payload._id);\n        let temp = state.posts;\n\n        if (index !== -1) {\n          temp[index] = payload;\n        }\n\n        return { ...state,\n          loading: false,\n          posts: temp\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/Users/hassanabbas/Desktop/Nodejs/DevConnector/client/src/redux/reducers/postReducer.js"],"names":["GET_ALL_POST","GET_ALL_POST_ERROR","GET_ALL_POST_SUCCESS","LIKE_POST_SUCCESS","initialState","posts","post","loading","error","state","action","type","payload","index","filter","item","_id","indexOf","temp"],"mappings":"AAAA,SACEA,YADF,EAEEC,kBAFF,EAGEC,oBAHF,EAIEC,iBAJF,QAKO,iBALP;AAOA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE,IAFa;AAGnBC,EAAAA,OAAO,EAAE,KAHU;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;AAMA,eAAe,UAAUC,KAAK,GAAGL,YAAlB,EAAgCM,MAAhC,EAAwC;AACrD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKX,YAAL;AAAmB;AACjB,eAAO,EACL,GAAGS,KADE;AAELF,UAAAA,OAAO,EAAE;AAFJ,SAAP;AAID;;AACD,SAAKL,oBAAL;AAA2B;AACzB,eAAO,EACL,GAAGO,KADE;AAELF,UAAAA,OAAO,EAAE,KAFJ;AAGLF,UAAAA,KAAK,EAAEO;AAHF,SAAP;AAKD;;AACD,SAAKX,kBAAL;AAAyB;AACvB,eAAO,EACL,GAAGQ,KADE;AAELF,UAAAA,OAAO,EAAE;AAFJ,SAAP;AAID;;AACD,SAAKJ,iBAAL;AAAwB;AACtB,YAAIU,KAAK,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,MAAZ,CAAoBC,IAAD,IAAUA,IAAI,CAACC,GAAlC,EAAuCC,OAAvC,CAA+CL,OAAO,CAACI,GAAvD,CAAZ;AACA,YAAIE,IAAI,GAAGT,KAAK,CAACJ,KAAjB;;AACA,YAAIQ,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBK,UAAAA,IAAI,CAACL,KAAD,CAAJ,GAAcD,OAAd;AACD;;AACD,eAAO,EACL,GAAGH,KADE;AAELF,UAAAA,OAAO,EAAE,KAFJ;AAGLF,UAAAA,KAAK,EAAEa;AAHF,SAAP;AAKD;;AACD;AAAS;AACP,eAAOT,KAAP;AACD;AAlCH;AAoCD","sourcesContent":["import {\n  GET_ALL_POST,\n  GET_ALL_POST_ERROR,\n  GET_ALL_POST_SUCCESS,\n  LIKE_POST_SUCCESS,\n} from \"../action/types\";\n\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: false,\n  error: {},\n};\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case GET_ALL_POST: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case GET_ALL_POST_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n        posts: payload,\n      };\n    }\n    case GET_ALL_POST_ERROR: {\n      return {\n        ...state,\n        loading: false,\n      };\n    }\n    case LIKE_POST_SUCCESS: {\n      let index = state.posts.filter((item) => item._id).indexOf(payload._id);\n      let temp = state.posts;\n      if (index !== -1) {\n        temp[index] = payload;\n      }\n      return {\n        ...state,\n        loading: false,\n        posts: temp,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}